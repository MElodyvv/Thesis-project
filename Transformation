import json
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import pairwise_distances
from gensim.models import Word2Vec
import random

# 1. Load the data ---------------------
file_path_en = r'C:\Users\86189\Desktop\UVA毕业论文\dataset\yum_train.json'
file_path_cn = r'C:\Users\86189\Desktop\UVA毕业论文\dataset\965-en - 副本.csv'

with open(file_path_en, 'r', encoding='utf-8') as file:
    data_en = json.load(file)

en_recipe_df = pd.DataFrame(data_en)
en_cn_recipes = en_recipe_df.loc[en_recipe_df['cuisine'] == 'chinese'].drop(columns=['cuisine'])
en_cn_recipes['ingredients'] = en_cn_recipes['ingredients'].apply(lambda x: ', '.join(x))
en_cn_recipes = en_cn_recipes.sample(n=965, random_state=42)

# Load Chinese-Chinese recipes (translated)
cn_recipe_df = pd.read_csv(file_path_cn)
cn_recipe_df['Title'] = cn_recipe_df['Title'].str.strip().str.lower()
cn_recipe_df['Ingredients'] = cn_recipe_df['Ingredients'].str.replace("'", " ").str.lower()
cn_recipe_df.rename(columns={'Title': 'id'}, inplace=True)
cn_recipe_df['id'] = cn_recipe_df['id'].str.lower()
cn_recipe_df.rename(columns={'Ingredients': 'ingredients'}, inplace=True)
cn_recipe_df['ingredients'] = cn_recipe_df['ingredients'].str.replace('[', '').str.replace(']', '')
cn_recipe_df['ingredients'] = cn_recipe_df['ingredients'].str.strip()

en_cn_recipes['cuisine_label'] = 'EN-CN'
cn_recipe_df['cuisine_label'] = 'CN-CN'

# Build training corpus by mixing cuisine labels and ingredients
cn_sentences = [[row['cuisine_label']] + row['ingredients'].split(' , ') for index, row in cn_recipe_df.iterrows()]
en_sentences = [[row['cuisine_label']] + row['ingredients'].split(', ') for index, row in en_cn_recipes.iterrows()]
sentences = en_sentences + cn_sentences

# Train Word2Vec model
model = Word2Vec(sentences, vector_size=100, window=5, min_count=5, workers=4)

# Save the trained model
model.save("chinese_recipe_word2vec.model")

# Example: Calculate "soy sauce - EN-CN + CN-CN = ?" to find the CN-CN equivalent of EN-CN's soy sauce
def find_similar_ingredient(en_ingredient, source_cuisine, target_cuisine):
    try:
        similar_words = model.wv.most_similar(positive=[en_ingredient, target_cuisine], negative=[source_cuisine])
        return similar_words
    except KeyError as e:
        return str(e)

# Test the function
similar_ingredient = find_similar_ingredient('flour', 'EN-CN', 'CN-CN')
print("Similar ingredient to EN-CN's 'flour' in CN-CN:", similar_ingredient)
